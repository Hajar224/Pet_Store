{
	"info": {
		"_postman_id": "58fc0a0e-f758-451c-bc3b-0b7bf5fea66f",
		"name": "Swaggar Petstore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37949796"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "Add a new pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//*************General\r",
									" var JsonData = pm.response.json();\r",
									" var requestData = pm.request.body;\r",
									" var requestJson = JSON.parse(requestData);\r",
									"\r",
									"pm.test(\"Status code is equal to 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that status code name is OK \", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//**********************************************pet id*********************************************\r",
									"pm.test(\"Check that pet ID is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.id).to.not.be.null;\r",
									"    pm.expect(JsonData.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request pet id matches response pet id\" , function(){\r",
									"    pm.expect(JsonData.id).to.equal(requestJson.id);\r",
									"});\r",
									"\r",
									"//*********************************************pet category****************************************\r",
									"pm.test(\"Check that pet category is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('category');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category id is exists\" , function(){\r",
									"    pm.expect(JsonData.category).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category id is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.category.id).to.not.be.null;\r",
									"    pm.expect(JsonData.category.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of category id is number\" , function(){\r",
									"    pm.expect(typeof(JsonData.category.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request category id matches response category id\" , function(){\r",
									"    pm.expect(JsonData.category.id).to.equal(requestJson.category.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category name is exists\" , function(){\r",
									"    pm.expect(JsonData.category).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.category.name).to.not.be.null;\r",
									"     pm.expect(JsonData.category.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of category name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.category.name)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request category name matches response category name\" , function(){\r",
									"    pm.expect(JsonData.category.name).to.equal(requestJson.category.name);\r",
									"});\r",
									"\r",
									"//********************************************pet name*******************************************\r",
									"pm.test(\"Check that pet name is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.name).to.not.be.null;\r",
									"    pm.expect(JsonData.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.name)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request pet name matches response pet name\" , function(){\r",
									"    pm.expect(JsonData.name).to.equal(requestJson.name);\r",
									"});\r",
									"\r",
									"//******************************Pet photoUrls*************************************\r",
									"pm.test(\"Check that pet photoUrls is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('photoUrls');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet photoUrls is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.photoUrls).to.not.be.null;\r",
									"    pm.expect(JsonData.photoUrls).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet photoUrls is object\" , function(){\r",
									"    pm.expect(typeof(JsonData.photoUrls)).to.equal('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request pet photoUrls matches response pet photoUrls\" , function(){\r",
									"    pm.expect(JsonData.photoUrls[0]).to.equal(requestJson.photoUrls[0]);\r",
									"});\r",
									"\r",
									"//********************************************pet tags*****************************************\r",
									"pm.test(\"Check that pet tags is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('tags');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id is exists\" , function(){\r",
									"    pm.expect(JsonData.tags[0]).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.tags[0].id).to.not.be.null;\r",
									"    pm.expect(JsonData.tags[0].id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.tags[0].id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request tags id matches response tags id\" , function(){\r",
									"    pm.expect(JsonData.tags[0].id).to.equal(requestJson.tags[0].id);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags name is exists\" , function(){\r",
									"    pm.expect(JsonData.tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.tags[0].name).to.not.be.null;\r",
									"     pm.expect(JsonData.tags[0].name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of tags name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.tags[0].name)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request tags name matches response tags name\" , function(){\r",
									"    pm.expect(JsonData.tags[0].name).to.equal(requestJson.tags[0].name);\r",
									"});\r",
									"//****************************************pet status**********************************************\r",
									"pm.test(\"Check that pet status is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet status is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.status).to.not.be.null;\r",
									"     pm.expect(JsonData.status).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet status is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.status)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request pet status matches response pet status\" , function(){\r",
									"    pm.expect(JsonData.status).to.equal(requestJson.status);\r",
									"});\r",
									"//********************************response header***************************************\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//**************************************************\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 20,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Animals\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"image\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"tag-1\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}pet",
							"host": [
								"{{BaseURL}}pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//*************General\r",
									" var JsonData = pm.response.json();\r",
									" var requestData = pm.request.body;\r",
									" var requestJson = JSON.parse(requestData);\r",
									"\r",
									"pm.test(\"Status code is equal to 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that status code name is OK \", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//**********************************************pet id*********************************************\r",
									"pm.test(\"Check that pet ID is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.id).to.not.be.null;\r",
									"    pm.expect(JsonData.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request pet id matches response pet id\" , function(){\r",
									"    pm.expect(JsonData.id).to.equal(requestJson.id);\r",
									"});\r",
									"\r",
									"//*********************************************pet category****************************************\r",
									"pm.test(\"Check that pet category is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('category');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category id is exists\" , function(){\r",
									"    pm.expect(JsonData.category).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category id is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.category.id).to.not.be.null;\r",
									"    pm.expect(JsonData.category.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of category id is number\" , function(){\r",
									"    pm.expect(typeof(JsonData.category.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request category id matches response category id\" , function(){\r",
									"    pm.expect(JsonData.category.id).to.equal(requestJson.category.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category name is exists\" , function(){\r",
									"    pm.expect(JsonData.category).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.category.name).to.not.be.null;\r",
									"     pm.expect(JsonData.category.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of category name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.category.name)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request category name matches response category name\" , function(){\r",
									"    pm.expect(JsonData.category.name).to.equal(requestJson.category.name);\r",
									"});\r",
									"\r",
									"//********************************************pet name*******************************************\r",
									"pm.test(\"Check that pet name is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.name).to.not.be.null;\r",
									"    pm.expect(JsonData.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.name)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request pet name matches response pet name\" , function(){\r",
									"    pm.expect(JsonData.name).to.equal(requestJson.name);\r",
									"});\r",
									"\r",
									"//******************************Pet photoUrls*************************************\r",
									"pm.test(\"Check that pet photoUrls is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('photoUrls');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet photoUrls is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.photoUrls).to.not.be.null;\r",
									"    pm.expect(JsonData.photoUrls).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet photoUrls is object\" , function(){\r",
									"    pm.expect(typeof(JsonData.photoUrls)).to.equal('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request pet photoUrls matches response pet photoUrls\" , function(){\r",
									"    pm.expect(JsonData.photoUrls[0]).to.equal(requestJson.photoUrls[0]);\r",
									"});\r",
									"\r",
									"//********************************************pet tags*****************************************\r",
									"pm.test(\"Check that pet tags is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('tags');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id is exists\" , function(){\r",
									"    pm.expect(JsonData.tags[0]).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.tags[0].id).to.not.be.null;\r",
									"    pm.expect(JsonData.tags[0].id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.tags[0].id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request tags id matches response tags id\" , function(){\r",
									"    pm.expect(JsonData.tags[0].id).to.equal(requestJson.tags[0].id);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags name is exists\" , function(){\r",
									"    pm.expect(JsonData.tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.tags[0].name).to.not.be.null;\r",
									"     pm.expect(JsonData.tags[0].name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of tags name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.tags[0].name)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that request tags name matches response tags name\" , function(){\r",
									"    pm.expect(JsonData.tags[0].name).to.equal(requestJson.tags[0].name);\r",
									"});\r",
									"//****************************************pet status**********************************************\r",
									"pm.test(\"Check that pet status is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet status is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.status).to.not.be.null;\r",
									"     pm.expect(JsonData.status).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet status is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.status)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response pet status matches requesst pet status \" , function(){\r",
									"    pm.expect(JsonData.status).to.equal(requestJson.status);\r",
									"});\r",
									"//********************************response header***************************************\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//**************************************************"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 10,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Animals\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"image\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"tag-1\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}pet",
							"host": [
								"{{BaseURL}}pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//*****General**********\r",
									"var JsonData = pm.response.json();\r",
									"//********************************response body***************************************\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response body contains or returns pets\", function(){\r",
									"    pm.expect(JsonData.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pets response body is object\", function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"for( i=0; i<JsonData.length; i++){\r",
									"pm.test(\"Check that status is exists in the pet response\", function(){\r",
									"    pm.expect(JsonData[i]).to.have.property('status');\r",
									"});\r",
									"}\r",
									"\r",
									"/*pm.test(\"Validate that response body is empty for invalid status\", function(){\r",
									"    pm.expect(JsonData.length).to.equal(0);\r",
									"});*/\r",
									"\r",
									"pm.test(\"Validate that api response returns status code 400 / Bad request or default response for empty or missing status\", function(){\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200 , 400]);\r",
									"});\r",
									"\r",
									"//********************************response header**************************************\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}pet/findByStatus{{SoldPets}}",
							"host": [
								"{{BaseURL}}pet"
							],
							"path": [
								"findByStatus{{SoldPets}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//**************General\r",
									"var JsonData = pm.response.json();\r",
									"//*********************************response body**************************\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//*******************************pet ID***********************************\r",
									"pm.test(\"Check that pet ID is exists\", function(){\r",
									"    pm.expect(JsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet ID is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.id).to.not.be.null;\r",
									"    pm.expect(JsonData.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that ID data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"/*pm.test(\"Validate that there is error when entering non exixting id\" , function(){\r",
									"   pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that empty id is not allowed\" , function(){\r",
									"   pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
									"});*/\r",
									"\r",
									"//*********************************pet category****************************\r",
									"//id\r",
									"pm.test(\"Check that category id is exists\" , function(){\r",
									"    pm.expect(JsonData.category).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category id is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.category.id).to.not.be.null;\r",
									"    pm.expect(JsonData.category.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of category id is number\" , function(){\r",
									"    pm.expect(typeof(JsonData.category.id)).to.equal('number');\r",
									"});\r",
									"//name\r",
									"pm.test(\"Check that category name is exists\" , function(){\r",
									"    pm.expect(JsonData.category).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that category name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.category.name).to.not.be.null;\r",
									"     pm.expect(JsonData.category.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of category name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.category.name)).to.equal('string');\r",
									"});\r",
									"\r",
									"//*********************************pet name*********************************\r",
									"pm.test(\"Check that pet name is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.name).to.not.be.null;\r",
									"    pm.expect(JsonData.name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.name)).to.equal('string');\r",
									"});\r",
									"\r",
									"//******************************Pet photoUrls********************************\r",
									"pm.test(\"Check that pet photoUrls is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('photoUrls');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet photoUrls is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.photoUrls).to.not.be.null;\r",
									"    pm.expect(JsonData.photoUrls).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet photoUrls is object\" , function(){\r",
									"    pm.expect(typeof(JsonData.photoUrls)).to.equal('object');\r",
									"});\r",
									"\r",
									"//**************************************pet tags*****************************\r",
									"//id\r",
									"pm.test(\"Check that tags id is exists\" , function(){\r",
									"    pm.expect(JsonData.tags[0]).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.tags[0].id).to.not.be.null;\r",
									"    pm.expect(JsonData.tags[0].id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.tags[0].id)).to.equal('number');\r",
									"});\r",
									"//name\r",
									"pm.test(\"Check that tags name is exists\" , function(){\r",
									"    pm.expect(JsonData.tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that tags name is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.tags[0].name).to.not.be.null;\r",
									"     pm.expect(JsonData.tags[0].name).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of tags name is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.tags[0].name)).to.equal('string');\r",
									"});\r",
									"\r",
									"//*********************************pet status*******************************\r",
									"pm.test(\"Check that pet status is exists\" , function(){\r",
									"    pm.expect(JsonData).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet status is not null or undefiend\" , function(){\r",
									"    pm.expect(JsonData.status).to.not.be.null;\r",
									"     pm.expect(JsonData.status).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of pet status is string\" , function(){\r",
									"    pm.expect(typeof(JsonData.status)).to.equal('string');\r",
									"});\r",
									"//********************************response header**************************************\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}pet{{PetID}}",
							"host": [
								"{{BaseURL}}pet{{PetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a pet with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check that response body is object\", function () {\r",
									"    pm.expect(typeof(JsonData)).to.be.equal('object');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(\"10\")\r",
									"});\r",
									"\r",
									"//********************************response header***************************************\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "cat",
									"type": "text"
								},
								{
									"key": "status",
									"value": "available",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}pet{{UpdatedPet}}",
							"host": [
								"{{BaseURL}}pet{{UpdatedPet}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*//deleting an exsisting pet\r",
									"var JsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check that response body is object\", function () {\r",
									"    pm.expect(typeof(JsonData)).to.be.equal('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(\"20\")\r",
									"\r",
									"//********header\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"});*/\r",
									"\r",
									"//*********************deleting non existing pet**************************\r",
									"pm.test(\"Check the status code for deleting non exsisting pet\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the status name for deleting non exsisting pet\", function(){\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"//********************************response header***************************************\r",
									"pm.test(\"Content-length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{BaseURL}}pet{{DeletedPet}}",
							"host": [
								"{{BaseURL}}pet{{DeletedPet}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"var RequestData = pm.request.body;\r",
									"var RequestJson = JSON.parse(RequestData);\r",
									"\r",
									"pm.collectionVariables.set(\"BaseURL\", \"https://petstore.swagger.io/v2/\");\r",
									"\r",
									"pm.test(\"Check that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//**********response body************\r",
									"pm.test(\"Check that data type of response body  is object\" , function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"//order id\r",
									"pm.test(\"Check that order ID is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.id).to.not.be.null;\r",
									"    pm.expect(JsonData.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request order id matches response order id\" , function(){\r",
									"    pm.expect(JsonData.id).to.equal(RequestJson.id);\r",
									"});\r",
									"\r",
									"//pet id \r",
									"pm.test(\"Check that pet ID is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"petId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.petId).to.not.be.null;\r",
									"    pm.expect(JsonData.petId).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.petId)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request pet id matches response pet id\" , function(){\r",
									"    pm.expect(JsonData.petId).to.equal(RequestJson.petId);\r",
									"});\r",
									"\r",
									"//order quantity\r",
									"pm.test(\"Check that order quantity is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order quantity is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.quantity).to.not.be.null;\r",
									"    pm.expect(JsonData.quantity).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that quantity data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request order quantity matches response order quantity\" , function(){\r",
									"    pm.expect(JsonData.quantity).to.equal(RequestJson.quantity);\r",
									"});\r",
									"\r",
									"//order shipdate\r",
									"pm.test(\"Check that order shipDate is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"shipDate\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order shipDate is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.shipDate).to.not.be.null;\r",
									"    pm.expect(JsonData.shipDate).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that shipDate data type is string\" , function(){ \r",
									"    pm.expect(typeof(JsonData.shipDate)).to.equal('string');\r",
									"});\r",
									"    //Date format for request and response\r",
									"    var RequestDate = new Date(RequestJson.shipDate).toISOString();\r",
									"    var ResponseDate = new Date(JsonData.shipDate).toISOString(); \r",
									"pm.test(\"Check that Request order shipDate matches response order shipDate\" , function(){\r",
									"    pm.expect(ResponseDate).to.equal(RequestDate);\r",
									"});\r",
									"\r",
									"//order status\r",
									"pm.test(\"Check that order status is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order status is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.status).to.not.be.null;\r",
									"    pm.expect(JsonData.status).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order status data type is string\" , function(){ \r",
									"    pm.expect(typeof(JsonData.status)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request order status matches response order status\" , function(){\r",
									"    pm.expect(JsonData.status).to.equal(RequestJson.status);\r",
									"});\r",
									"\r",
									"//order complete\r",
									"pm.test(\"Check that order complete is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"complete\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order complete is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.complete).to.not.be.null;\r",
									"    pm.expect(JsonData.complete).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order complete data type is boolean\" , function(){ \r",
									"    pm.expect(typeof(JsonData.complete)).to.equal('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Request order complete matches response order complete\" , function(){\r",
									"    pm.expect(JsonData.complete).to.equal(RequestJson.complete);\r",
									"});\r",
									"//**********response header**********\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"petId\": 20,\r\n  \"quantity\": 1,\r\n  \"shipDate\": \"2025-03-28\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}store/order",
							"host": [
								"{{BaseURL}}store"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place an order for a pet (Negative Scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"var RequestData = pm.request.body;\r",
									"var RequestJson = JSON.parse(RequestData);\r",
									"\r",
									"pm.test(\"verify the response with string order quantity data type\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 2,\r\n  \"petId\": 1,\r\n  \"quantity\": \"6\",\r\n  \"shipDate\": \"2025-03-28\",\r\n  \"status\": \"approved\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}store/order",
							"host": [
								"{{BaseURL}}store"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purshase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"JsonData = pm.response.json();\r",
									"pm.test(\"Check that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//**********response body************\r",
									"pm.test(\"Check that data type of response body  is object\" , function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"//order id\r",
									"pm.test(\"Check that order ID is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.id).to.not.be.null;\r",
									"    pm.expect(JsonData.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"//pet id \r",
									"pm.test(\"Check that pet ID is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"petId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet id is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.petId).to.not.be.null;\r",
									"    pm.expect(JsonData.petId).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that pet id data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.petId)).to.equal('number');\r",
									"});\r",
									"\r",
									"//order quantity\r",
									"pm.test(\"Check that order quantity is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order quantity is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.quantity).to.not.be.null;\r",
									"    pm.expect(JsonData.quantity).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that quantity data type is number\" , function(){ \r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"//order shipdate\r",
									"pm.test(\"Check that order shipDate is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"shipDate\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order shipDate is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.shipDate).to.not.be.null;\r",
									"    pm.expect(JsonData.shipDate).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that shipDate data type is string\" , function(){ \r",
									"    pm.expect(typeof(JsonData.shipDate)).to.equal('string');\r",
									"});\r",
									"\r",
									"//order status\r",
									"pm.test(\"Check that order status is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order status is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.status).to.not.be.null;\r",
									"    pm.expect(JsonData.status).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order status data type is string\" , function(){ \r",
									"    pm.expect(typeof(JsonData.status)).to.equal('string');\r",
									"});\r",
									"\r",
									"//order complete\r",
									"pm.test(\"Check that order complete is exists\" , function()\r",
									"{\r",
									"    pm.expect(JsonData).to.have.property(\"complete\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order complete is not null and not undefiend\" , function(){\r",
									"    pm.expect(JsonData.complete).to.not.be.null;\r",
									"    pm.expect(JsonData.complete).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that order complete data type is boolean\" , function(){ \r",
									"    pm.expect(typeof(JsonData.complete)).to.equal('boolean');\r",
									"});\r",
									"\r",
									"//**********response header**********\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-methods is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"server is present\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}store/order/2",
							"host": [
								"{{BaseURL}}store"
							],
							"path": [
								"order",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purshase order by ID (Negative Scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check that return status code is 400 - invalid ID\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}store/order/11",
							"host": [
								"{{BaseURL}}store"
							],
							"path": [
								"order",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"JsonData = pm.response.json();\r",
									"pm.test(\"Check that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"/*pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(\"5\")\r",
									"});*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}store/order/1",
							"host": [
								"{{BaseURL}}store"
							],
							"path": [
								"order",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"JsonData = pm.response.json();\r",
									"pm.test(\"Check that status code is: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(\"Invalid ID Supplied\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}store/order/-11",
							"host": [
								"{{BaseURL}}store"
							],
							"path": [
								"order",
								"-11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create list of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"var RequestData = pm.request.body;\r",
									"var RequestJson = JSON.parse(RequestData);\r",
									"\r",
									"//user-1 data\r",
									"pm.collectionVariables.set(\"UserID\", RequestJson[0].id);\r",
									"pm.collectionVariables.set(\"UsernName\", RequestJson[0].username);\r",
									"pm.collectionVariables.set(\"FirstName\", RequestJson[0].firstName);\r",
									"pm.collectionVariables.set(\"LastName\", RequestJson[0].lastName);\r",
									"pm.collectionVariables.set(\"Email\", RequestJson[0].email);\r",
									"pm.collectionVariables.set(\"Password\", RequestJson[0].password);\r",
									"pm.collectionVariables.set(\"Phone\", RequestJson[0].phone);\r",
									"pm.collectionVariables.set(\"UserStatus\", RequestJson[0].userStatus);\r",
									"\r",
									"//user-2 data\r",
									"pm.collectionVariables.set(\"UserID-2\", RequestJson[1].id);\r",
									"pm.collectionVariables.set(\"UsernName-2\", RequestJson[1].username);\r",
									"pm.collectionVariables.set(\"FirstName-2\", RequestJson[1].firstName);\r",
									"pm.collectionVariables.set(\"LastName-2\", RequestJson[1].lastName);\r",
									"pm.collectionVariables.set(\"Email-2\", RequestJson[1].email);\r",
									"pm.collectionVariables.set(\"Password-2\", RequestJson[1].password);\r",
									"pm.collectionVariables.set(\"Phone-2\", RequestJson[1].phone);\r",
									"pm.collectionVariables.set(\"UserStatus-2\", RequestJson[1].userStatus);\r",
									"\r",
									"\r",
									"//response body \r",
									"pm.test(\"Check that response code is: 200\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of response body is: object\", function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(\"ok\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1,\r\n    \"username\": \"Hajar@224\",\r\n    \"firstName\": \"Hajar\",\r\n    \"lastName\": \"Muhammad\",\r\n    \"email\": \"hajarmuhmd224@gmail.com\",\r\n    \"password\": \"123@Hajar\",\r\n    \"phone\": \"01095972825\",\r\n    \"userStatus\": 1\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"username\": \"Muhammad@212\",\r\n    \"firstName\": \"Muhammad\",\r\n    \"lastName\": \"Hamza\",\r\n    \"email\": \"Muhammad212@gmail.com\",\r\n    \"password\": \"123@Muhammad\",\r\n    \"phone\": \"01095972828\",\r\n    \"userStatus\": 1\r\n  }\r\n\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}user/createWithList",
							"host": [
								"{{BaseURL}}user"
							],
							"path": [
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"//response body \r",
									"pm.test(\"Check that data type of response body is: object\", function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response code is: 200\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"//userID\r",
									"pm.test(\"Check that userID is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of userID is number\", function () {\r",
									"    pm.expect(typeof(JsonData.id)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that userID is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.id).to.not.be.null;\r",
									"    pm.expect(JsonData.id).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response userID matches entered userID\" , function(){\r",
									"    pm.expect(JsonData.id).to.equal(pm.collectionVariables.get(\"UserID\"));\r",
									"});\r",
									"\r",
									"//userName\r",
									"pm.test(\"Check that userName is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"username\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of userName is string\", function () {\r",
									"    pm.expect(typeof(JsonData.username)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that userName is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.username).to.not.be.null;\r",
									"    pm.expect(JsonData.username).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response userName matches entered username\" , function(){\r",
									"    pm.expect(JsonData.username).to.equal(pm.collectionVariables.get(\"UsernName\"));\r",
									"});\r",
									"\r",
									"//firstName\r",
									"pm.test(\"Check that firstName is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"firstName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of firstName is string\", function () {\r",
									"    pm.expect(typeof(JsonData.firstName)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that firstName is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.firstName).to.not.be.null;\r",
									"    pm.expect(JsonData.firstName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response firstName matches entered firstName\" , function(){\r",
									"    pm.expect(JsonData.firstName).to.equal(pm.collectionVariables.get(\"FirstName\"));\r",
									"});\r",
									"\r",
									"//lastName\r",
									"pm.test(\"Check that lastName is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"lastName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of lastName is string\", function () {\r",
									"    pm.expect(typeof(JsonData.lastName)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastName is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.lastName).to.not.be.null;\r",
									"    pm.expect(JsonData.lastName).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response lastName matches entered lastName\" , function(){\r",
									"    pm.expect(JsonData.lastName).to.equal(pm.collectionVariables.get(\"LastName\"));\r",
									"});\r",
									"\r",
									"//email\r",
									"pm.test(\"Check that email is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of email is string\", function () {\r",
									"    pm.expect(typeof(JsonData.email)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that email is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.email).to.not.be.null;\r",
									"    pm.expect(JsonData.email).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response email matches entered email\" , function(){\r",
									"    pm.expect(JsonData.email).to.equal(pm.collectionVariables.get(\"Email\"));\r",
									"});\r",
									"\r",
									"//password\r",
									"pm.test(\"Check that password is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of password is string\", function () {\r",
									"    pm.expect(typeof(JsonData.password)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that password is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.password).to.not.be.null;\r",
									"    pm.expect(JsonData.password).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response password matches entered password\" , function(){\r",
									"    pm.expect(JsonData.password).to.equal(pm.collectionVariables.get(\"Password\"));\r",
									"});\r",
									"\r",
									"//phone\r",
									"pm.test(\"Check that phone is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"phone\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of phone is string\", function () {\r",
									"    pm.expect(typeof(JsonData.phone)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that phone is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.phone).to.not.be.null;\r",
									"    pm.expect(JsonData.phone).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response phone matches entered phone\" , function(){\r",
									"    pm.expect(JsonData.phone).to.equal(pm.collectionVariables.get(\"Phone\"));\r",
									"});\r",
									"\r",
									"//UserStatus\r",
									"pm.test(\"Check that userStatus is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"userStatus\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of userStatus is number\", function () {\r",
									"    pm.expect(typeof(JsonData.userStatus)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that userID is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.userStatus).to.not.be.null;\r",
									"    pm.expect(JsonData.userStatus).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that response userStatus matches entered userID\" , function(){\r",
									"    pm.expect(JsonData.userStatus).to.equal(pm.collectionVariables.get(\"UserStatus\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}user/{{UsernName}}",
							"host": [
								"{{BaseURL}}user"
							],
							"path": [
								"{{UsernName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"//response body \r",
									"pm.test(\"Check that response code is: 200\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of response body is: object\", function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(pm.collectionVariables.get(\"UsernName\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}user/{{UsernName}}",
							"host": [
								"{{BaseURL}}user"
							],
							"path": [
								"{{UsernName}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login to the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"//response body \r",
									"pm.test(\"Check that response code is: 200\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of response body is: object\", function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.include(\"logged in user session:\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}user/login?{{username}}&{{password}}",
							"host": [
								"{{BaseURL}}user"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "Hajar@224",
									"disabled": true
								},
								{
									"key": "password",
									"value": "123@Hajar",
									"disabled": true
								},
								{
									"key": "{{username}}",
									"value": null
								},
								{
									"key": "{{password}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout from system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"//response body \r",
									"pm.test(\"Check that response code is: 200\", function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of response body is: object\", function(){\r",
									"    pm.expect(typeof(JsonData)).to.equal('object');\r",
									"});\r",
									"\r",
									"//***********code************\r",
									"pm.test(\"Check that code is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of code is number\", function () {\r",
									"    pm.expect(typeof(JsonData.code)).to.equal('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.code).to.not.be.null;\r",
									"    pm.expect(JsonData.code).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that code is: 200\" , function(){\r",
									"    pm.expect(JsonData.code).to.equal(200);\r",
									"});\r",
									"\r",
									"//***********type************\r",
									"pm.test(\"Check that type is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of type is string\", function () {\r",
									"    pm.expect(typeof(JsonData.type)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.type).to.not.be.null;\r",
									"    pm.expect(JsonData.type).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of type\", function () {\r",
									"    pm.expect(JsonData.type).to.equal(\"unknown\")\r",
									"});\r",
									"\r",
									"//***********message*********\r",
									"pm.test(\"Check that message is exists\", function () {\r",
									"    pm.expect(JsonData).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the data type of message is string\", function () {\r",
									"    pm.expect(typeof(JsonData.message)).to.equal('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that message is not null or undefined\", function () {\r",
									"    pm.expect(JsonData.message).to.not.be.null;\r",
									"    pm.expect(JsonData.message).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value of message\", function () {\r",
									"    pm.expect(JsonData.message).to.equal(\"ok\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}user/logout",
							"host": [
								"{{BaseURL}}user"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": ""
		},
		{
			"key": "UserID",
			"value": ""
		},
		{
			"key": "UsernName",
			"value": ""
		},
		{
			"key": "FirstName",
			"value": ""
		},
		{
			"key": "LastName",
			"value": ""
		},
		{
			"key": "Email",
			"value": ""
		},
		{
			"key": "Password",
			"value": ""
		},
		{
			"key": "Phone",
			"value": ""
		},
		{
			"key": "UserStatus",
			"value": ""
		},
		{
			"key": "UserID-2",
			"value": ""
		},
		{
			"key": "UsernName-2",
			"value": ""
		},
		{
			"key": "FirstName-2",
			"value": ""
		},
		{
			"key": "LastName-2",
			"value": ""
		},
		{
			"key": "Email-2",
			"value": ""
		},
		{
			"key": "Password-2",
			"value": ""
		},
		{
			"key": "Phone-2",
			"value": ""
		},
		{
			"key": "UserStatus-2",
			"value": ""
		}
	]
}